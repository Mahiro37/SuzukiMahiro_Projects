//=============================================================================
//
// スタートUI処理 [ui_start.cpp]
// Author : Suzuki Mahiro
//
//=============================================================================

//*****************************************************************************
//インクルードファイル
//*****************************************************************************
#include "ui_start.h"
#include "renderer.h"
#include "manager.h"
#include "sound.h"

//*****************************************************************************
//マクロ定義
//*****************************************************************************
#define INIT_GAME_BGM_COUNT (60)	//ゲームスタートしてからゲームBGMをかけるまでのカウント数

//*****************************************************************************
//コンストラクタ
//*****************************************************************************
CUiStart::CUiStart(OBJTYPE nPriority) :CUi(nPriority)
{
	m_nCntUi = 0;
	m_nCntGameBGM = 0;
	m_bFirstUpdate = false;
}

//*****************************************************************************
//デストラクタ
//*****************************************************************************
CUiStart::~CUiStart()
{
}

//*****************************************************************************
//スタートUIの生成
//*****************************************************************************
CUiStart* CUiStart::Create(const D3DXVECTOR3 &pos, const D3DXVECTOR3 &size)
{
	//スタートUIのメモリ確保
	CUiStart *pUiStart = new CUiStart;

	if (pUiStart != nullptr)
	{
		//スタートUI情報の設定
		pUiStart->SetPos(pos);
		pUiStart->SetSize(size);

		//UIの初期化処理
		pUiStart->Init();

		return pUiStart;
	}

	return nullptr;
}

//*****************************************************************************
//初期化処理
//*****************************************************************************
HRESULT CUiStart::Init(void)
{
	//テクスチャの設定
	BindTexture(GetTexture(TYPE_START));

	//色の設定
	SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.0f));

	//UIの初期化
	CUi::Init();

	return S_OK;
}

//*****************************************************************************
//終了処理
//*****************************************************************************
void CUiStart::Uninit(void)
{
	//指定したOBJTYPEのみを更新する
	SetUpdateType(OBJTYPE_MAX, NULL);

	//UIの終了処理
	CUi::Uninit();
}

//*****************************************************************************
//更新処理
//*****************************************************************************
void CUiStart::Update(void)
{
	if (m_bFirstUpdate == false)
	{ //更新処理が1フレーム目のとき
		//判定をtrueにする
		m_bFirstUpdate = true;

		//サウンドの生成
		CManager::GetSound()->PlaySound(CSound::SOUND_LABEL_START);
	}

	if (m_nCntUi < 120 && m_nCntGameBGM < INIT_GAME_BGM_COUNT)
	{ //カウントが規定値より小さいとき
		//カウントを進める
		m_nCntUi++;
	}

	if (m_nCntUi == 60)
	{ //カウントが規定値を超えたとき
		//色の設定
		SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));
	}
	else if (m_nCntUi == 120)
	{ //カウントが規定値より小さいとき
		//色の設定
		SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.0f));
	}

	if (m_nCntGameBGM < INIT_GAME_BGM_COUNT && m_nCntUi > 60)
	{ //カウントが規定値より小さいとき
		//カウントを進める
		m_nCntGameBGM++;
	}

	if (m_nCntGameBGM >= INIT_GAME_BGM_COUNT)
	{ //カウントが規定値を超えたとき
		//サウンドの生成
		CManager::GetSound()->PlaySound(CSound::SOUND_LABEL_GAME);
	}

	if (m_nCntUi >= 120 && m_nCntGameBGM >= INIT_GAME_BGM_COUNT)
	{ //どちらのカウントも規定値を超えたとき
		//終了処理
		Uninit();
		return;
	}

	//UIの更新処理
	CUi::Update();
}

//*****************************************************************************
//描画処理
//*****************************************************************************
void CUiStart::Draw(void)
{
	//UIの描画処理
	CUi::Draw();
}